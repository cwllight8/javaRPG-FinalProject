package edu.neumont.light.javarpg.models;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import edu.neumont.light.javarpg.models.enums.MonsterType;

/**
 * @author cole
 *
 */
public class Monster implements Comparable<Monster> {

	private int level;

	private int HP;

	private MonsterType type;

	private List<Item> loot = new ArrayList<>();

	private List<Skill> skills = new ArrayList<>();

	private int basicAttack;

	private Random rand = new Random();

	/**
	 * default constructor
	 */
	public Monster() {
	}

	/**
	 * @param pLevel
	 *            the level of the player so the monsters level can be generated
	 * @param type
	 *            the type of monster it will be
	 */
	public Monster(int pLevel, MonsterType type) {
		this.level = this.generateLevel(pLevel);
		this.type = type;
		this.basicAttack = 3 + (int) (this.level * 0.5);
		this.HP = 10 + (this.level * 3);

	}

	/**
	 * @param pLevel
	 *            the level of the player so the monsters level can be generated
	 */
	public Monster(int pLevel) {
		this.level = this.generateLevel(pLevel);
		this.generateType();
		this.basicAttack = 3 + (int) (this.level * 0.5);
		this.HP = 10 + (this.level * 3);

	}

	/**
	 * @param pLevel
	 *            the level of the player so the monsters level can be generated
	 * @return a level within 2 above or bellow the player
	 */
	private int generateLevel(int pLevel) {
		if (pLevel <= 2) {
			return rand.nextInt(2) + pLevel;
		} else {
			int lowerBound = pLevel - 2;
			return rand.nextInt(5) + lowerBound;
		}
	}

	/**
	 * randomly generate and assign the monsters type and call the proper generate
	 * skills method
	 */
	private void generateType() {

		int chance = rand.nextInt(99) + 1;

		if (chance <= 33) {
			this.type = MonsterType.BadBird;
			this.generateBirdSkills();
		} else if (chance <= 66) {
			this.type = MonsterType.SillySlime;
			this.generateSlimeSkills();
		} else {
			this.type = MonsterType.StabbingSkull;
			this.generateSkullSkills();
		}

	}

	/**
	 * generates the skills unique to a Stabbing Skull
	 */
	private void generateSkullSkills() {
		Skill ds = new DamageSkill("lunges at the opponent stabing them with its horns", "horn charge",
				5 + (int) (this.level * .5), 0);
		this.skills.add(ds);
	}

	/**
	 * generates the skill unique to a Silly Slime
	 */
	private void generateSlimeSkills() {
		Skill ds = new DamageSkill("wraps itself around the opponent", "devour", 4 + (int) (this.level * .5), 0);
		this.skills.add(ds);

	}

	/**
	 * generates the skills unique to a Bad Bird
	 */
	private void generateBirdSkills() {
		Skill ds = new DamageSkill("pecks the opponent", "peck", 5 + (int) (this.level * .5), 0);
		this.skills.add(ds);

	}

	/**
	 * @param damage
	 *            the damage the monsters will take from and attack
	 */
	public void takeDamage(int damage) {
		this.HP -= damage;
	}

	/**
	 * @return returns the monsters basic attack damage
	 */
	public int getBasicAttack() {
		return this.basicAttack;
	}

	/**
	 * @param index
	 *            the index in the array the skill is at
	 * @return the amount of damage the skill will do
	 */
	public int getSkillDamage(int index) {

		DamageSkill as = (DamageSkill) this.skills.get(index);

		return as.getDamage();
	}

	/**
	 * @param pLevel
	 *            the players level
	 * @return a list of items that were generated randomly
	 */
	public List<Item> generateLoot(int pLevel) {

		this.loot.clear();

		int numOfItems = this.generateAmountOfLoot();
		if (numOfItems != 0) {
			for (int i = 0; i < numOfItems; i++) {
				generateTypeOfLoot(pLevel);
			}
		}

		return this.loot;
	}

	/**
	 * @return a random number between 2 and 5 for how much loot will be dropped
	 */
	private int generateAmountOfLoot() {

		return rand.nextInt(3);

	}

	/**
	 * @param pLevel
	 *            the players level
	 * 
	 *            will generate either a weapon(60%) or a potion(40%) and adds it to
	 *            the loot array
	 */
	private void generateTypeOfLoot(int pLevel) {
		// 60 weapon 40 potion
		int chance = rand.nextInt(100) + 1;
		if (chance < 61) {
			// weapon
			Item weapon = new Weapon("S001", "Sword", this.generateItemLevel(pLevel));
			this.loot.add(weapon);
		} else {
			// potion
			Item potion = new HPPotion("H001", 15, "Health Potion");
			this.loot.add(potion);
		}
	}

	/**
	 * @param pLevel
	 *            the players level
	 * @return the level the item generated will be
	 */
	private int generateItemLevel(int pLevel) {
		if (pLevel <= 2) {
			return rand.nextInt(2) + pLevel;
		} else {
			int lowerBound = pLevel - 2;
			return rand.nextInt(5) + lowerBound;
		}
	}

	/**
	 * @return how much xp is generated by defeating this monster
	 */
	public int expGain() {
		return this.level * 3;
	}

	/**
	 * @param m
	 *            the monster you would like to compare this one to
	 * @return positive if this has a greater level, 0 if they are equal and
	 *         Negative if m has a greater level
	 */
	@Override
	public int compareTo(Monster m) {
		return this.level - m.getLevel();
	}

	/**
	 * @param m
	 *            the monster you will compare this one to
	 * @return true if they are equal and false if they are not(based on level)
	 */
	public boolean equals(Monster m) {
		return this.compareTo(m) == 0;
	}

	/**
	 * @return the all of the monsters fields as a single string
	 */
	@Override
	public String toString() {
		return "Monster [level=" + level + ", HP=" + HP + ", type=" + type + ", loot=" + loot + ", skills=" + skills
				+ ", basicAttack=" + basicAttack + ", rand=" + rand + "]";
	}

	/**
	 * @return true if the monsters HP has fallen to/below 0
	 */
	public boolean checkDeath() {
		return this.HP <= 0;
	}

	/**
	 * @return the level of the monster
	 */
	public int getLevel() {
		return level;
	}

	/**
	 * @param level
	 *            set the level of the monster
	 */
	public void setLevel(int level) {
		this.level = level;
	}

	/**
	 * @return the amount of hp the monster has
	 */
	public int getHP() {
		return HP;
	}

	/**
	 * @param hP
	 *            set the amount of hp the monster has
	 */
	public void setHP(int hP) {
		HP = hP;
	}

	/**
	 * @return the type of monster it is
	 */
	public MonsterType getType() {
		return type;
	}

	/**
	 * @param type
	 *            set the type of monster it is
	 */
	public void setType(MonsterType type) {
		this.type = type;
	}

	/**
	 * @return the loot that the player gets for defeating the monster
	 */
	public List<Item> getLoot() {
		return loot;
	}

	/**
	 * @param loot
	 *            set the loot the player will get
	 */
	public void setLoot(List<Item> loot) {
		this.loot = loot;
	}

	/**
	 * @return get the list of skills the monster has
	 */
	public List<Skill> getSkills() {
		return skills;
	}

	/**
	 * @param skills
	 *            set the list of skills the monster will have
	 */
	public void setSkills(List<Skill> skills) {
		this.skills = skills;
	}

	/**
	 * @param basicAttack
	 *            the basic attack the monster will have
	 */
	public void setBasicAttack(int basicAttack) {
		this.basicAttack = basicAttack;
	}

}
